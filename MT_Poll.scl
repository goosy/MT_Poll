FUNCTION_BLOCK "MT_Poll"
TITLE='modbusTCP 轮询'
VERSION:'1.5'
KNOW_HOW_PROTECT
AUTHOR:Goosy
NAME:MTPoll
FAMILY:GoosyLib

CONST
    HW_CODE := W#16#40;
    CONN_TYPE := B#16#11;
    MAX_POLLS_SIZE := 128;
END_CONST

VAR_INPUT
    TCON_Parameters : STRUCT
        block_length        : WORD := HW_CODE;    //#!TCON config!#
        id                  : WORD := W#16#1;
        connection_type     : BYTE := CONN_TYPE;
        active_est          : BOOL := TRUE;
        local_device_id     : BYTE := B#16#2;
        local_tsap_id_len   : BYTE ;
        rem_subnet_id_len   : BYTE ;
        rem_staddr_len      : BYTE := B#16#4;
        rem_tsap_id_len     : BYTE ;
        next_staddr_len     : BYTE ;
        local_tsap_id       : ARRAY  [1 .. 16] OF BYTE := B#16#0;
        rem_subnet_id       : ARRAY  [1 ..  6] OF BYTE := B#16#0;
        rem_staddr          : ARRAY  [1 ..  6] OF BYTE := B#16#C0, B#16#A8, B#16#0, B#16#1;
        rem_tsap_id         : ARRAY  [1 .. 16] OF BYTE := B#16#1, B#16#F6;
        next_staddr         : ARRAY  [1 ..  6] OF BYTE := B#16#0;
        spare               : WORD := W#16#0;    //#!TCON config!#
    END_STRUCT ;
    interval_time            : DINT := 200;   // 单次询问的间隔时间 (TCP协议无需考量应答时间)
    iv_time AT interval_time : TIME;
    data                    : ANY ; // 轮询定义系列数据区
    data_P AT data: STRUCT  // Define ANY structure
        SyntaxID:      BYTE := 16#10;
        DataType:      BYTE := 16#2;
        DataCount:      INT ;
        DB_Nummer:      INT ;
        Byte_Pointer: DWORD := dw#16#84000000;
    END_STRUCT;
END_VAR

VAR_IN_OUT
    con_trigger    : BOOL ;            // 建立TCP连接触发器
    send_trigger   : BOOL ;            // TCP发送触发器
    recv_trigger   : BOOL := TRUE;     // TCP接收触发器
    discon_trigger : BOOL ;            // 断开TCP连接触发器
    on_poll        : BOOL ;            // 正处于单次询问中
    reset          : BOOL := TRUE;     // 重新初始化
END_VAR

VAR
    poll_index     : INT ;             // 第几轮
    poll_length    : INT ;             // 轮询个数
    poll_base      : INT ;             // 轮询块中轮询开始位置
    poll_DB        : INT ;             // 轮询块号
    w_poll_DB AT poll_DB: WORD ;
    send_DB        : INT ;             // 当前轮询发送块号
    w_send_DB AT send_DB: WORD ;
    send_start     : INT ;             // 当前轮询发送偏移量
    send_length    : INT ;             // 当前轮询发送长度
    recv_DB        : INT ;             // 当前轮询接收块号     (即当前发送对应的接收块)
    w_recv_DB AT recv_DB: WORD ;
    recv_start     : INT ;             // 当前轮询接收偏移量
    last_recv_DB   : INT ;             // 最后接收的接收块号
    w_last_DB AT recv_DB: WORD ;
    last_recv_start: INT ;            // 最后接收的接收偏移量
    connect        : TCON ;
    send           : TSEND ;
    receive        : TRCV ;
    disconnect     : TDISCON ;
    timer_on       : TON ;
    buff : STRUCT                      // ====== 接收缓冲区
        MBAP_seq : INT ;               //接收事务号
        MBAP_protocol : INT ;          //接收协议号，必须为0
        MBAP_length : INT ;            //接收长度
        unit_ID : BYTE ;               //设备号
        func_code : BYTE ;             //modbus功能号
        data : ARRAY[0..251] OF BYTE ; //数据 第一字节为接收长度
    END_STRUCT ;
END_VAR

VAR_TEMP
    t_send_DB      : WORD ;            // 临时发送块号     (即当前接收到数据所对应的发送块)
    t_send_start     : INT ;             // 临时发送偏移量
    t_recv_DB      : WORD ;            // 临时接收块号     (即当前接收到数据所对应的接收块)
    t_recv_start     : INT ;             // 临时接收偏移量
    t_index        : INT ;             // 临时轮询号
    t_offset       : INT ;             // 临时偏移量
    t_length       : INT ;             // 临时长度
    offset         : INT ;             // 当前轮询数据偏移量
    index          : INT ;             // 数据复制指针
    wait_count     : INT ;             // 超时值
    try_times      : INT ;             // 一个设备的最多询问失败次数，超过该次数标记该设备数据无效
    enable_poll    : BOOL ;            // 询问是否允许
    active_poll    : BOOL ;            // 询问是否活跃
    timeout        : BOOL ;            // 超时
END_VAR

BEGIN
    // Initialize the polling list
    IF reset THEN
        IF (data_P.DB_Nummer = 0) // The DB number cannot be 0
            OR (data_P.DataType <> B#16#2) // Must be a byte type
            OR ((data_P.Byte_Pointer AND DW#16#ff000000) <> DW#16#84000000)
        THEN
            RETURN;
        END_IF;

        poll_DB := data_P.DB_Nummer;
        poll_base := DWORD_TO_INT(SHR(IN := data_P.Byte_Pointer, N := 3));
        poll_length := data_P.DataCount/16;

        FOR poll_index := 0 TO poll_length - 1 BY 1 DO
            offset := poll_base + poll_index * 16;
            WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 14] := 0; //waitCount
            w_send_DB := WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 4];
            IF send_DB = 0 THEN // Default send_DB is the poll_DB
                WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 4] := w_poll_DB;
            END_IF;
        END_FOR;

        discon_trigger := TRUE;
        poll_index := 0;
        reset := FALSE;
    END_IF;

    // disconnect
    disconnect (
        REQ     := discon_trigger,
        ID      := TCON_Parameters.id);
    IF discon_trigger THEN
        // Reconnect in the next round
        connect (
            REQ     := FALSE,
            ID      := TCON_Parameters.id,
            CONNECT := TCON_Parameters);
        discon_trigger := FALSE;
        RETURN; // Proceed to the next round
    END_IF;

    // Range check
    IF poll_index < 0 OR poll_index >= poll_length THEN
        poll_index := 0;
    END_IF;
    // Start timer
    timer_on(IN := on_poll, PT := iv_time);
    // send_trigger is activated in the second cycle of each polling round
    IF timer_on.Q THEN
        // next round
        poll_index := (poll_index + 1) MOD poll_length;
        // Timing and skipping
        FOR index := 0 TO poll_length - 1 BY 1 DO
            offset := poll_base + index * 16;

            try_times := WORD_TO_INT(WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 2]);
            t_recv_DB := WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 8];
            t_recv_start := WORD_TO_INT(WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 10]);
            // 计时+1
            wait_count := WORD_TO_INT(WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 14]) + 1;
            timeout := wait_count > try_times;
            // 在超时上升沿处理
            IF timeout AND NOT WORD_TO_BLOCK_DB(w_poll_DB).DX[offset, 1] THEN
                WORD_TO_BLOCK_DB(w_poll_DB).DX[offset, 5] := FALSE;     // 复位 custom_trigger
                WORD_TO_BLOCK_DB(t_recv_DB).DX[t_recv_start, 0] := FALSE; // 设备不正常
                WORD_TO_BLOCK_DB(t_recv_DB).DX[t_recv_start, 1] := TRUE;  // 设置设备无效标志
                WORD_TO_BLOCK_DB(t_recv_DB).DX[t_recv_start, 2] := FALSE; // 设置设备收到数据标志
            END_IF;

            enable_poll := WORD_TO_BLOCK_DB(w_poll_DB).DX[offset, 0];
            active_poll := WORD_TO_BLOCK_DB(w_poll_DB).DX[offset, 3] OR WORD_TO_BLOCK_DB(w_poll_DB).DX[offset, 5];
            IF NOT enable_poll OR NOT active_poll THEN
                wait_count:= 0; // 计时归零
                IF poll_index = index THEN
                    poll_index := (index + 1) MOD poll_length;
                END_IF;
            END_IF;
            WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 14] := INT_TO_WORD(wait_count);
            WORD_TO_BLOCK_DB(w_poll_DB).DX[offset, 1] := timeout;
        END_FOR;
        // 轮询第一个循环
        on_poll := FALSE;
        con_trigger := TRUE;
        recv_trigger := TRUE;
    ELSIF NOT on_poll THEN
        // 轮询第二个循环
        on_poll := TRUE;
        send_trigger := TRUE;
        con_trigger := FALSE;
        discon_trigger := FALSE;
    ELSE
        // 轮询余下循环
        send_trigger := FALSE;
    END_IF;
    offset := poll_base + poll_index * 16;

    // 连接
    connect (
        REQ     := con_trigger,
        ID      := TCON_Parameters.id,
        CONNECT := TCON_Parameters);

    // 准备块信息
    w_send_DB := WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 4];
    send_start := WORD_TO_INT(WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 6]);
    send_length := WORD_TO_INT(WORD_TO_BLOCK_DB(w_send_DB).DW[send_start + 4]) + 6;
    w_recv_DB := WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 8];
    recv_start := WORD_TO_INT(WORD_TO_BLOCK_DB(w_poll_DB).DW[offset + 10]);

    // 发送
    data_P.DataCount := send_length;
    data_P.DB_Nummer := send_DB;
    data_P.Byte_Pointer := INT_TO_DWORD(send_start * 8) OR DW#16#84000000;
    WORD_TO_BLOCK_DB(w_send_DB).DW[send_start] := INT_TO_WORD(1000 + poll_index);   // P#0.0 MBAP_seq
    WORD_TO_BLOCK_DB(w_send_DB).DW[send_start + 2] := W#16#0;                       // P#2.0 MBAP_protocol
    send (
        REQ     := send_trigger,
        ID      := TCON_Parameters.id,
        LEN     := send_length,
        DATA    := data);

    // 接收
    receive (
        EN_R    := recv_trigger,
        ID      := TCON_Parameters.id,
        DATA    := buff);

    // 复位上一个实时接收块的收到标志
    IF last_recv_DB <> 0 THEN
        WORD_TO_BLOCK_DB(w_last_DB).DX[last_recv_start,2] := FALSE;
        last_recv_DB := 0;
    END_IF;

    // 当前实时接收块
    IF receive.NDR THEN
        t_index := buff.MBAP_seq - 1000; // 接收缓冲对应的轮询号 (MBAP_seq - 1000)
        t_offset := poll_base + t_index * 16;
        t_length := buff.MBAP_length;
        t_send_DB := WORD_TO_BLOCK_DB(w_poll_DB).DW[t_offset + 4];
        t_send_start := WORD_TO_INT(WORD_TO_BLOCK_DB(w_poll_DB).DW[t_offset + 6]);
        w_last_DB := WORD_TO_BLOCK_DB(w_poll_DB).DW[t_offset + 8];
        last_recv_start := WORD_TO_INT(WORD_TO_BLOCK_DB(w_poll_DB).DW[t_offset + 10]);
        // 接收成功时处理
        IF
            buff.MBAP_protocol = 0 AND t_length > 3
            AND buff.func_code = WORD_TO_BLOCK_DB(t_send_DB).DB[t_send_start + 7] // 对应轮询号的功能号
        THEN
            WORD_TO_BLOCK_DB(w_poll_DB).DW[t_offset + 14] := 0;    // wait_count 复位
            WORD_TO_BLOCK_DB(w_last_DB).DX[last_recv_start,0] := TRUE;  // 设置设备正常标志
            WORD_TO_BLOCK_DB(w_last_DB).DX[last_recv_start,1] := FALSE; // 设置设备无效标志
            WORD_TO_BLOCK_DB(w_last_DB).DX[last_recv_start,2] := TRUE;  // 设置设备收到数据标志
            // 将接收缓存区的数据搬移到指定接收块中
            WORD_TO_BLOCK_DB(w_last_DB).DB[last_recv_start+1] := buff.unit_ID;
            WORD_TO_BLOCK_DB(w_last_DB).DB[last_recv_start+2] := buff.func_code;
            FOR index := 3 TO t_length BY 1 DO // 从第4个字节开始复制
                WORD_TO_BLOCK_DB(w_last_DB).DB[last_recv_start+index] := buff.data[index-3];
            END_FOR;
            // 复位自定义发送触发器
            WORD_TO_BLOCK_DB(w_poll_DB).DX[offset, 5] := FALSE;
        ELSE
            WORD_TO_BLOCK_DB(w_last_DB).DX[last_recv_start,0] := FALSE; // 设置设备正常标志;
            WORD_TO_BLOCK_DB(w_last_DB).DX[last_recv_start,1] := TRUE;  // 设置设备无效标志
            WORD_TO_BLOCK_DB(w_last_DB).DX[last_recv_start,2] := FALSE; // 设置设备收到数据标志
        END_IF;
    END_IF;
END_FUNCTION_BLOCK
