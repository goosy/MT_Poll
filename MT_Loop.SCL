// 连接数据块，为"MT_Poll"的背景数据块
// 一个连接就要定义一个这样的背景块。本例展示2个连接："MT01" "MT02"，依据实际增减
DATA_BLOCK "MT01" "MT_Poll"
BEGIN
    TCON_Parameters.block_length := W#16#40;     //固定为64
    TCON_Parameters.id := W#16#1;                //连接ID 每个连接必须不一样！
    TCON_Parameters.connection_type := B#16#11;  //连接类型 11H=TCP/IP native, 12H=ISO on TCP, 13H=UDP, 01=TCP/IP comp
    TCON_Parameters.active_est := TRUE;          //是否主动（本功能调用必须为TRUE）
    TCON_Parameters.local_device_id := B#16#2;   //2:300CPU 5:400CPU左X5 15:400CPU右X5 8:400CPU左X8 18:400CPU右X8
    TCON_Parameters.local_tsap_id_len := B#16#0;
    TCON_Parameters.rem_subnet_id_len := B#16#0;
    TCON_Parameters.rem_staddr_len := B#16#4;
    TCON_Parameters.rem_tsap_id_len := B#16#2;
    TCON_Parameters.next_staddr_len := B#16#0;
    TCON_Parameters.rem_staddr[1] := B#16#C0;    //IP1 192
    TCON_Parameters.rem_staddr[2] := B#16#A8;    //IP2 168
    TCON_Parameters.rem_staddr[3] := B#16#0F;    //IP3 15
    TCON_Parameters.rem_staddr[4] := B#16#2B;    //IP4 43
    TCON_Parameters.rem_tsap_id[1] := B#16#1;    //PortH 1F6:502
    TCON_Parameters.rem_tsap_id[2] := B#16#F6;   //PortL
    TCON_Parameters.spare := W#16#0;             //固定为0
END_DATA_BLOCK
DATA_BLOCK "MT02" "MT_Poll"
BEGIN
    TCON_Parameters.block_length := W#16#40;     //固定为64
    TCON_Parameters.id := W#16#2;                //连接ID 每个连接必须不一样！
    TCON_Parameters.connection_type := B#16#11;  //连接类型 11H=TCP/IP native, 12H=ISO on TCP, 13H=UDP, 01=TCP/IP comp
    TCON_Parameters.active_est := TRUE;          //是否主动（本功能调用必须为TRUE）
    TCON_Parameters.local_device_id := B#16#2;   //2:300CPU 5:400CPU左X5 15:400CPU右X5 8:400CPU左X8 18:400CPU右X8
    TCON_Parameters.local_tsap_id_len := B#16#0;
    TCON_Parameters.rem_subnet_id_len := B#16#0;
    TCON_Parameters.rem_staddr_len := B#16#4;
    TCON_Parameters.rem_tsap_id_len := B#16#2;
    TCON_Parameters.next_staddr_len := B#16#0;
    TCON_Parameters.rem_staddr[1] := B#16#C0;    //IP1 192
    TCON_Parameters.rem_staddr[2] := B#16#A8;    //IP2 168
    TCON_Parameters.rem_staddr[3] := B#16#0F;    //IP3 15
    TCON_Parameters.rem_staddr[4] := B#16#2B;    //IP4 43
    TCON_Parameters.rem_tsap_id[1] := B#16#1;    //PortH 1F7:503
    TCON_Parameters.rem_tsap_id[2] := B#16#F7;   //PortL
    TCON_Parameters.spare := W#16#0;             //固定为0
END_DATA_BLOCK


// 轮询定义数据块 "Poll_DB" DB51
// 每个TCP连接对应一个轮询序列，可以定义多个轮询序列。
// 本例只定义了2个轮询序列，即 "Poll_DB".pollList1 "Poll_DB".pollList2
DATA_BLOCK "Poll_DB"
STRUCT
    pollList1 : ARRAY  [0 .. 1] OF      // ====== 第1个连接的轮询列表，修改数组上下标决定轮询个数
    STRUCT
        MBAP_seq      : WORD ;          //事务号 PLC自动填写
        MBAP_protocol : WORD ;          //必须为0
        MBAP_length   : WORD := W#16#6; //长度，对读命令，通常为6
        unit_ID       : BYTE ;          //设备号，不关心的情况下可以填0
        func_code     : BYTE ;          //modbus功能号
        start         : WORD ;          //起始地址
        length        : WORD ;          //长度
        recvDB        : INT ;           //接收数据块号
        recvDBB       : INT ;           //接收数据块起始地址
    END_STRUCT ;
    pollList2 : ARRAY  [0 .. 0] OF      // ====== 第2个连接的轮询列表，修改数组上下标决定轮询个数
    STRUCT
        MBAP_seq      : WORD ;          //事务号 PLC自动填写
        MBAP_protocol : WORD ;          //必须为0
        MBAP_length   : WORD := W#16#6; //长度，对读命令，通常为6
        unit_ID       : BYTE ;          //设备号，不关心的情况下可以填0
        func_code     : BYTE ;          //modbus功能号
        start         : WORD ;          //起始地址
        length        : WORD ;          //长度
        recvDB        : INT ;           //接收数据块号
        recvDBB       : INT ;           //接收数据块起始地址
    END_STRUCT ;
END_STRUCT ;
BEGIN //在下方定义轮询数据
    pollList1[0].unit_ID := B#16#1;
    pollList1[0].func_code := B#16#3;
    pollList1[0].start := W#16#0;
    pollList1[0].length := W#16#C;
    pollList1[0].recvDB := 52;
    pollList1[0].recvDBB := 0;
    pollList1[1].unit_ID := B#16#2;
    pollList1[1].func_code := B#16#4;
    pollList1[1].start := W#16#0;
    pollList1[1].length := W#16#A;
    pollList1[1].recvDB := 52;
    pollList1[1].recvDBB := 256;
    pollList2[0].unit_ID := B#16#3;
    pollList2[0].func_code := B#16#4;
    pollList2[0].start := W#16#0;
    pollList2[0].length := W#16#8;
    pollList2[0].recvDB := 52;
    pollList2[0].recvDBB := 512;
END_DATA_BLOCK

// 设备数据接收DB块，可根据设备定义多个接收DB块
// 本例DB52，在其中定义了4个设备的数据，应依据实际增减
// 建议一个设备只定义在一个DB中，本例一个DB定义多个设备仅为了展示可以这样组织
DATA_BLOCK DB52
STRUCT
    workOK0 : BOOL ;                 //通讯正确指示符  ===第1个接收数据开始
    invalid0 : BOOL ;                //数据无效标志
    on_receive0 : BOOL ;             //新收数据标志
    unit_ID0 : BYTE ;                //设备号
    func_code0 : BYTE ;              //modbus功能号
    length0 : BYTE ;                 //数据长度
    data0 : ARRAY[0..251] OF BYTE ;  //数据
    workOK1 : BOOL ;                 //通讯正确指示符  ===第2个接收数据开始
    invalid1 : BOOL ;                //数据无效标志
    on_receive1 : BOOL ;             //新收数据标志
    unit_ID1 : BYTE ;                //设备号
    func_code1 : BYTE ;              //modbus功能号
    length1 : BYTE ;                 //数据长度
    data1 : ARRAY[0..251] OF BYTE ;  //数据
    workOK2 : BOOL ;                 //通讯正确指示符  ===第3个接收数据开始
    invalid2 : BOOL ;                //数据无效标志
    on_receive2 : BOOL ;             //新收数据标志
    unit_ID2 : BYTE ;                //设备号
    func_code2 : BYTE ;              //modbus功能号
    length2 : BYTE ;                 //数据长度
    data2 : ARRAY[0..251] OF BYTE ;  //数据
END_STRUCT ;
BEGIN
END_DATA_BLOCK

// 调用
FUNCTION "MT_Loop" : VOID
BEGIN
// 第一个modbusTCP的连接调用
// 一切用默认参数
"MT_Poll".MT01 (
    DATA  := "Poll_DB".pollList1);

// 第二个modbusTCP的连接调用
// 展示部分高级用法
"MT_Poll".MT02 (
    intervalTime := 500,          // 单次询问的间隔时间 (TCP协议无需考量应答时间)
    tryTimes := 32,               // 大于intervalTime的overTimes倍便判定超时，标记该设备数据无效
    DATA  := "Poll_DB".pollList2);

// IF DB5.on_receive0 THEN 当有新数据接收到时
//     利用接收信息进行数据转移等处理
// END_IF;

END_FUNCTION
