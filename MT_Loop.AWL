// 连接数据块，为"MB_TCP_Poll"的背景数据块
// 一个连接就要定义一个这样的背景块。本例展示2个连接："MT01" "MT02"，依据实际增减

// 第一个连接背景块，在下方依据提示填写连接IP等信息
DATA_BLOCK "MT01"
TITLE =
VERSION : 0.0
"MB_TCP_Poll"
BEGIN
    TCON_Parameters.block_length := W#16#40;     //固定为64
    TCON_Parameters.id := W#16#1;                //连接ID 每个连接必须不一样！
    TCON_Parameters.connection_type := B#16#11;  //连接类型，
    TCON_Parameters.active_est := TRUE;          //是否主动（本功能调用必须为TRUE）
    TCON_Parameters.local_device_id := B#16#2;   //2:300CPU 5:400CPU左X5 15:400CPU右X5 8:400CPU左X8 18:400CPU右X8
    TCON_Parameters.local_tsap_id_len := B#16#0;
    TCON_Parameters.rem_subnet_id_len := B#16#0;
    TCON_Parameters.rem_staddr_len := B#16#4;
    TCON_Parameters.rem_tsap_id_len := B#16#2;
    TCON_Parameters.next_staddr_len := B#16#0;
    TCON_Parameters.rem_staddr[1] := B#16#C0;    //IP1 192
    TCON_Parameters.rem_staddr[2] := B#16#A8;    //IP2 168
    TCON_Parameters.rem_staddr[3] := B#16#17;    //IP3 23
    TCON_Parameters.rem_staddr[4] := B#16#A;     //IP4 10
    TCON_Parameters.rem_tsap_id[1] := B#16#1;    //PortH 1F6:502
    TCON_Parameters.rem_tsap_id[2] := B#16#F6;   //PortL
    TCON_Parameters.spare := W#16#0;             //固定为0
END_DATA_BLOCK

// 第二个连接背景块，在下方依据提示填写连接IP等信息
DATA_BLOCK "MT02"
TITLE =
VERSION : 0.0
"MB_TCP_Poll"
BEGIN
    TCON_Parameters.block_length := W#16#40;     //固定为64
    TCON_Parameters.id := W#16#2;                //连接ID 每个连接必须不一样！
    TCON_Parameters.connection_type := B#16#11;  //连接类型，
    TCON_Parameters.active_est := TRUE;          //是否主动（本功能调用必须为TRUE）
    TCON_Parameters.local_device_id := B#16#2;   //2:300CPU 5:400CPU左X5 15:400CPU右X5 8:400CPU左X8 18:400CPU右X8
    TCON_Parameters.local_tsap_id_len := B#16#0;
    TCON_Parameters.rem_subnet_id_len := B#16#0;
    TCON_Parameters.rem_staddr_len := B#16#4;
    TCON_Parameters.rem_tsap_id_len := B#16#2;
    TCON_Parameters.next_staddr_len := B#16#0;
    TCON_Parameters.rem_staddr[1] := B#16#C0;    //IP1 192
    TCON_Parameters.rem_staddr[2] := B#16#A8;    //IP2 168
    TCON_Parameters.rem_staddr[3] := B#16#17;    //IP3 23
    TCON_Parameters.rem_staddr[4] := B#16#A;     //IP4 10
    TCON_Parameters.rem_tsap_id[1] := B#16#1;    //PortH 1F7:503
    TCON_Parameters.rem_tsap_id[2] := B#16#F7;   //PortL
    TCON_Parameters.spare := W#16#0;             //固定为0
END_DATA_BLOCK


// 轮询定义数据块 "Poll_DB" DB51
// 每个TCP连接对应一个轮询序列，可以定义多个轮询序列。
// 本例只定义了2个轮询序列，即 "Poll_DB".pollList1 "Poll_DB".pollList2
// "Poll_DB".buff 缓存区，用来缓存接收的数据，必须有至少1个缓存区，多个连接可共用缓存区。
// 缓存区也可以不在本轮询数据块中定义，比如单独一个缓存DB，只要调用时指定到正确的缓存区即可。
DATA_BLOCK "Poll_DB"
TITLE =
VERSION : 0.0
STRUCT
    pollList1 : ARRAY  [0 .. 1] OF  // ====== 第1个连接的轮询列表，修改数组上下标决定轮询个数
    STRUCT
        MBAP_seq : WORD ;               //事务号 PLC自动填写
        MBAP_protocol : WORD ;          //必须为0
        MBAP_length : WORD  := W#16#6;  //长度，对读命令，通常为6
        MBAP_Addr : BYTE ;              //设备号，不关心的情况下可以填0
        MFunction : BYTE ;              //modbus功能号
        Addr : WORD ;                   //起始地址
        Number : WORD ;                 //长度
        recvDB : INT ;                  //接收数据块号
        recvDBB : INT ;                 //接收数据块起始地址
    END_STRUCT ;
    pollList2 : ARRAY  [0 .. 0] OF  // ====== 第2个连接的轮询列表，修改数组上下标决定轮询个数
    STRUCT
        MBAP_seq : WORD ;               //事务号 PLC自动填写
        MBAP_protocol : WORD ;          //必须为0
        MBAP_length : WORD  := W#16#6;  //长度，对读命令，通常为6
        MBAP_Addr : BYTE ;              //设备号，不关心的情况下可以填0
        MFunction : BYTE ;              //modbus功能号
        Addr : WORD ;                   //起始地址
        Number : WORD ;                 //长度
        recvDB : INT ;                  //接收数据块号
        recvDBB : INT ;                 //接收数据块起始地址
    END_STRUCT ;
    buff : STRUCT                   // ====== 接收缓冲区，多个modbusTCP可共用1个，buff的结构和实际值不用修改。
        MBAP_seq : WORD ;               //接收事务号
        MBAP_protocol : WORD ;          //接收协议号，必须为0
        MBAP_length : WORD ;            //接收长度
        MBAP_Addr : BYTE ;              //设备号
        MFunction : BYTE ;              //modbus功能号
        MLength : BYTE ;                // 接收长度
        data : ARRAY[0..250] OF BYTE ;  //数据
    END_STRUCT ;
END_STRUCT ;
BEGIN //在下方定义轮询数据
    pollList1[0].MBAP_Addr := B#16#1;
    pollList1[0].MFunction := B#16#3;
    pollList1[0].Addr := W#16#0;
    pollList1[0].Number := W#16#C;
    pollList1[0].recvDB := 52;
    pollList1[0].recvDBB := 0;
    pollList1[1].MBAP_Addr := B#16#2;
    pollList1[1].MFunction := B#16#4;
    pollList1[1].Addr := W#16#0;
    pollList1[1].Number := W#16#A;
    pollList1[1].recvDB := 52;
    pollList1[1].recvDBB := 256;
    pollList2[0].MBAP_Addr := B#16#3;
    pollList2[0].MFunction := B#16#4;
    pollList2[0].Addr := W#16#0;
    pollList2[0].Number := W#16#8;
    pollList2[0].recvDB := 52;
    pollList2[0].recvDBB := 512;
END_DATA_BLOCK

// 设备数据接收DB块，可根据设备定义多个接收DB块
// 本例DB52，在其中定义了4个设备的数据，应依据实际增减
// 建议一个设备只定义在一个DB中，本例一个DB定义多个设备仅为了展示可以这样组织
DATA_BLOCK DB52
STRUCT
    workOK0 : BOOL ;    //通讯正确指示符  ===第1个接收数据开始
    MBAP_Addr0 : BYTE ;    //设备号
    MFunction0 : BYTE ;    //modbus功能号
    MLength0 : BYTE ;    //数据长度
    data0 : ARRAY[0..251] OF BYTE ;    //数据
    workOK1 : BOOL ;    //通讯正确指示符  ===第2个接收数据开始
    MBAP_Addr1 : BYTE ;    //设备号
    MFunction1 : BYTE ;    //modbus功能号
    MLength1 : BYTE ;    //数据长度
    data1 : ARRAY[0..251] OF BYTE ;    //数据
    workOK2 : BOOL ;    //通讯正确指示符  ===第3个接收数据开始
    MBAP_Addr2 : BYTE ;    //设备号
    MFunction2 : BYTE ;    //modbus功能号
    MLength2 : BYTE ;    //数据长度
    data2 : ARRAY[0..251] OF BYTE ;    //数据
END_STRUCT ;
BEGIN
END_DATA_BLOCK

// 调用
FUNCTION "MT_Loop" : VOID
TITLE =
VERSION : 0.0

BEGIN
NETWORK
TITLE = 第一个modbusTCP的连接调用
// 一切用默认参数
    CALL "MB_TCP_Poll" , "MT01" (
        DATA  := "Poll_DB".pollList1,
        buff  := "Poll_DB".buff);
    NOP   0;

NETWORK
TITLE = 第二个modbusTCP的连接调用
// 展示部分高级用法
    CALL "MB_TCP_Poll" , "MT02" (
        intervalTime := T#500MS,      // 单次询问的间隔时间 (TCP协议无需考量应答时间)
        overTimes := 32,              // 大于intervalTime的overTimes倍便判定超时，标记该设备数据无效
        DATA  := "Poll_DB".pollList2,
        buff  := "Poll_DB".buff);
    NOP   0;
    // "MT02".OnReceive THEN 当有新数据接收到时
    // "MT02".receiveDB 指示已接收DB号
    // "MT02".receiveDBB 指示已接收DB偏移量
    // "MT02".receiveLEN 已接收数据的长度
    // 利用以上信息进行数据转移等处理

END_FUNCTION